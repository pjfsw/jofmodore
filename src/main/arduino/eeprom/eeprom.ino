 const PROGMEM unsigned char data[] = {

  /* 0x0000 */
  0xa9, 0x7e, 0x8d, 0x01, 0xd0, 0xa9, 0x7f, 0x8d, 0x03, 0xd0, 0x60, 0xbd, 0xf8, 0xfa, 0x8d, 0x01, 
  0xd0, 0x8d, 0x00, 0x02, 0x09, 0x40, 0x8d, 0x01, 0x02, 0x60, 0xae, 0x01, 0x02, 0xac, 0x00, 0x02, 
  0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 
  0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 
  0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 
  0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 
  0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 
  0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 
  0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 
  0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x60, 0xae, 0x01, 0x02, 0xac, 0x00, 0x02, 0xb2, 
  0x01, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 
  0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 
  0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 
  0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 
  0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 
  0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 
  /* 0x0100 */
  0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 
  0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xe6, 0x01, 0xd0, 0x02, 0xe6, 0x02, 0xce, 
  0x02, 0x02, 0xf0, 0x03, 0x4c, 0x9f, 0xf8, 0x60, 0xae, 0x01, 0x02, 0xac, 0x00, 0x02, 0x9c, 0x02, 
  0x02, 0xb2, 0x01, 0xd0, 0x01, 0x60, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 
  0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 
  0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 
  0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 
  0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 
  0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 
  0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 
  0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xee, 0x02, 
  0x02, 0xe6, 0x01, 0xd0, 0x02, 0xe6, 0x02, 0x4c, 0x31, 0xf9, 0xae, 0x01, 0x02, 0xac, 0x00, 0x02, 
  0xa5, 0x01, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 
  0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 
  0x8c, 0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 
  0x01, 0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 
  /* 0x0200 */
  0xd0, 0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 
  0x2a, 0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 
  0x90, 0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x8c, 0x01, 0xd0, 0x2a, 0x90, 
  0x03, 0x8e, 0x01, 0xd0, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xce, 0x02, 0x02, 0xf0, 0x03, 0x4c, 
  0xc0, 0xf9, 0x60, 0xa9, 0x00, 0xa2, 0x80, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 
  0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 
  0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 
  0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 
  0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 
  0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0x49, 0xff, 0x60, 0xa0, 0x00, 0xa9, 0x00, 0xa2, 0x80, 
  0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 
  0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 
  0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 
  0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 
  0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 0xec, 0x01, 0xd0, 0x2a, 0xee, 0x01, 0xd0, 0xce, 0x01, 0xd0, 
  0x49, 0xff, 0x91, 0x01, 0xc8, 0xd0, 0xa5, 0x60, 0x3e, 0x3c, 0x3a, 0x36, 0x20, 0x3b, 0xfb, 0xa2, 
  /* 0x0300 */
  0x03, 0x20, 0x0b, 0xf8, 0xa9, 0x03, 0x20, 0x1a, 0xf8, 0x20, 0x2b, 0xfb, 0x9c, 0x01, 0x00, 0xa9, 
  0x03, 0x85, 0x02, 0x20, 0x9a, 0xfa, 0xae, 0x00, 0x03, 0xf0, 0x0a, 0xe6, 0x02, 0xda, 0x20, 0x9a, 
  0xfa, 0xfa, 0xca, 0xd0, 0xf6, 0xa2, 0x00, 0x20, 0x0b, 0xf8, 0x60, 0xa9, 0x00, 0x20, 0x1a, 0xf8, 
  0xa9, 0x00, 0x20, 0x1a, 0xf8, 0xa9, 0x00, 0x20, 0x1a, 0xf8, 0x60, 0xa2, 0x03, 0x20, 0x0b, 0xf8, 
  0xa9, 0x01, 0x20, 0x1a, 0xf8, 0xa9, 0x40, 0x20, 0x1a, 0xf8, 0xa2, 0x00, 0x20, 0x0b, 0xf8, 0x60, 
  0xa2, 0x01, 0x20, 0x0b, 0xf8, 0xa9, 0x28, 0x20, 0x1a, 0xf8, 0xa9, 0x00, 0x20, 0x1a, 0xf8, 0x20, 
  0x43, 0xfa, 0x8d, 0x07, 0x02, 0xa2, 0x00, 0x20, 0x0b, 0xf8, 0xa9, 0x40, 0x8d, 0x03, 0x02, 0xa9, 
  0x09, 0x8d, 0x04, 0x02, 0xa9, 0x04, 0x8d, 0x05, 0x02, 0x9c, 0x06, 0x02, 0xa2, 0x01, 0x20, 0x0b, 
  0xf8, 0xa9, 0xa8, 0x20, 0x1a, 0xf8, 0xa9, 0x0a, 0x20, 0x1a, 0xf8, 0xa9, 0x01, 0x20, 0x1a, 0xf8, 
  0xa2, 0x00, 0x20, 0x0b, 0xf8, 0x60, 0x86, 0x01, 0x84, 0x02, 0xa2, 0x01, 0x20, 0x0b, 0xf8, 0xad, 
  0x04, 0x02, 0x09, 0x80, 0x20, 0x1a, 0xf8, 0xad, 0x03, 0x02, 0x20, 0x1a, 0xf8, 0x20, 0x28, 0xf9, 
  0xa2, 0x00, 0x20, 0x0b, 0xf8, 0x18, 0xad, 0x03, 0x02, 0x69, 0x40, 0x8d, 0x03, 0x02, 0x90, 0x0d, 
  0xae, 0x04, 0x02, 0xe8, 0xe0, 0x10, 0xd0, 0x02, 0xa2, 0x00, 0x8e, 0x04, 0x02, 0x18, 0xad, 0x05, 
  0x02, 0x69, 0x08, 0x8d, 0x05, 0x02, 0x90, 0x08, 0xad, 0x06, 0x02, 0x49, 0x01, 0x8d, 0x06, 0x02, 
  0xa2, 0x01, 0x20, 0x0b, 0xf8, 0xad, 0x04, 0x02, 0x09, 0x80, 0x20, 0x1a, 0xf8, 0xad, 0x03, 0x02, 
  0x20, 0x1a, 0xf8, 0xa9, 0x32, 0x8d, 0x02, 0x02, 0xa9, 0x20, 0x85, 0x01, 0x20, 0xba, 0xf9, 0xa2, 
  /* 0x0400 */
  0x00, 0x20, 0x0b, 0xf8, 0xa2, 0x01, 0x20, 0x0b, 0xf8, 0xa9, 0xa8, 0x20, 0x1a, 0xf8, 0xa9, 0x06, 
  0x20, 0x1a, 0xf8, 0xad, 0x05, 0x02, 0x20, 0x1a, 0xf8, 0xad, 0x06, 0x02, 0x20, 0x1a, 0xf8, 0xa2, 
  0x00, 0x20, 0x0b, 0xf8, 0x60, 0x78, 0xa9, 0x80, 0x8d, 0x02, 0xd0, 0xa9, 0xff, 0x8d, 0x04, 0xd0,
  0x9c, 0x05, 0xd0, 0xa9, 0xc0, 0x8d, 0x0b, 0xd0, 0xa2, 0x00, 0xea, 0xca, 0xd0, 0xfc, 0x9c, 0x0b,
  0xd0, 0x2c, 0x00, 0xd0, 0x50, 0xfb, 0x20, 0x00, 0xf8, 0x20, 0x50, 0xfb, 0x20, 0x63, 0xfc, 0xa2,
  0x9c, 0xa0, 0xfc, 0x20, 0x96, 0xfb, 0x20, 0xfc, 0xfa, 0xa2, 0xa1, 0xa0, 0xfc, 0x20, 0x96, 0xfb,
  0x4c, 0x01, 0x03, 0xa2, 0x8c, 0xa0, 0xfc, 0x20, 0x96, 0xfb, 0xad, 0x07, 0x02, 0x4a, 0x4a, 0x4a,
  0x4a, 0xa8, 0xb9, 0xaf, 0xfc, 0x8d, 0xac, 0xfc, 0xad, 0x07, 0x02, 0x29, 0x0f, 0xa8, 0xb9, 0xaf,
  0xfc, 0x8d, 0xad, 0xfc, 0xa2, 0xa4, 0xa0, 0xfc, 0x4c, 0x96, 0xfb, 0x40, 0x4a, 0x4f, 0x46, 0x4d,
  0x4f, 0x44, 0x4f, 0x52, 0x45, 0x20, 0x56, 0x30, 0x2e, 0x30, 0x31, 0x00, 0x4c, 0x4f, 0x41, 0x44,
  0x00, 0x4f, 0x4b, 0x00, 0x47, 0x46, 0x58, 0x20, 0x49, 0x44, 0x3a, 0x20, 0x00, 0x00, 0x00, 0x30,
  0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x41, 0x42, 0x43, 0x44, 0x45, 0x46, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0500 */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0600 */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  /* 0x0700 */
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
  0x00, 0x00, 0x4c, 0x96, 0xfb, 0x4c, 0x9a, 0xfa, 0x4c, 0x43, 0xfa, 0x4c, 0xba, 0xf9, 0x4c, 0x28,
  0xf9, 0x4c, 0x99, 0xf8, 0x4c, 0x1a, 0xf8, 0x4c, 0x0b, 0xf8, 0x8b, 0xfc, 0x25, 0xfc, 0x04, 0x03,

};
  
};

#define ANALOG_OFFSET 14

int dataPins[] = {
  ANALOG_OFFSET + 0,  // IO0
  ANALOG_OFFSET + 1,  // IO1
  ANALOG_OFFSET + 2,  // IO2
  2,                  // IO3
  3,                  // IO4
  4,                  // IO5
  5,                  // IO6
  6                   // IO7
  };

#define OE 7
#define WE 8


#define LATCH (4 + ANALOG_OFFSET)
#define CLOCK (5 + ANALOG_OFFSET)
#define SER (3 + ANALOG_OFFSET)

void setAddress(unsigned int address) {
  digitalWrite(OE,1);
  digitalWrite(WE,1);
  digitalWrite(LATCH,0);
  digitalWrite(CLOCK,0);
  shiftOut(SER, CLOCK, MSBFIRST, address/256);    
  shiftOut(SER, CLOCK, MSBFIRST, address & 0xFF);    
  digitalWrite(LATCH,1);
  digitalWrite(LATCH,0);  
  delay(1);
}

int readByte() {
  datapins(INPUT);
  digitalWrite(WE,1);
  digitalWrite(OE,0);
  delay(1);
  int value = 0;
  for (int i = 0; i < 8; i++) {
    value |= digitalRead(dataPins[i]) << i; 
  }
  digitalWrite(OE,1);
  return value;
}

void printOkOrFail(int error) {
      if (error) {
      Serial.print("FAIL");
    } else {
      Serial.print("OK");
    }
}
void readData(int bytesToRead) {
  char out[5];
  int error = 0;
  for (int i = 0; i < bytesToRead; i++) {
    if (i % 16 == 0) {
      if (i > 0) {
        printOkOrFail(error);
      }
      error = 0;
      Serial.println();
      sprintf(out, "%04x ", i);
      Serial.print(out);
    }
    setAddress(i);
    int value = readByte();
    if (value != pgm_read_byte_near(data + i)) {
      error = 1;
    }
    sprintf(out, "%02x ", value);
    Serial.print(out);
  }
  printOkOrFail(error);
  Serial.println();
  Serial.flush();
}

void datapins(int direction) {
  for (int i = 0; i < 8; i++) {
    pinMode(dataPins[i], direction);
  }
}

void writeByte(unsigned char value) {
  digitalWrite(OE, 1);
  delay(1);
  datapins(OUTPUT);
  for (int i = 0; i < 8; i++) {
    digitalWrite(dataPins[i], (value & (1 << i)) ? 1 : 0);
  } 
  delay(1);
  digitalWrite(WE,0);
  delay(1);
  digitalWrite(WE,1);
  datapins(INPUT);
  delay(4);
}

void saveData() {
  char buf[100];
  for (int i = 0 ; i < sizeof(data); i++) {
    if (i % 256 == 0) {
      sprintf(buf, "Writing %04x-%04X", i, i+255);
      Serial.println(buf);
      Serial.flush();
    }
    setAddress(i);
    writeByte(pgm_read_byte_near(data + i));
  }
}

void setOutput(int pin, int value) {
  pinMode(pin, OUTPUT);
  digitalWrite(pin, value);
}

void setup() {
  Serial.begin(57600);
  datapins(INPUT);
  setOutput(OE, 1);
  setOutput(WE, 1);
  setOutput(LATCH, 0);
  setOutput(CLOCK, 0);
  setOutput(SER, 0);
  saveData();
  delay(10);
}

int i = 0;
void loop() {
  readData(sizeof(data));  
  delay(5000);
}
